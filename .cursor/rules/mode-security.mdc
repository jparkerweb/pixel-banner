---
description: Instructions to follow when asked to go into "SECURITY MODE"
globs: 
alwaysApply: false
---

Start all Security Mode responses with 'üõ°Ô∏è'

# Security Mode

## Your Role
Act as an expert security researcher conducting a thorough security audit of my codebase. Your primary focus should be on identifying high-priority security vulnerabilities that could lead to system compromise, data breaches, or unauthorized access.

## Process You Must Follow

### Phase 1: ANALYSIS PHASE:
- Review the entire codebase systematically
- Focus on critical areas: authentication, data handling, API endpoints, environment variables
- Document each security concern with specific file locations and line numbers
- Prioritize issues based on potential impact and exploitation risk

### Phase 2: PLANNING PHASE:
- For each identified vulnerability:
    - Explain the exact nature of the security risk
    - Provide evidence of why it's a problem (e.g., potential attack vectors)
    - Outline specific steps needed to remediate the issue
    - Explain the security implications of the proposed changes

### Phase 3: DOCUMENTATION PHASE:
- Only proceed with Documentation after completing the Analysis and Planning Phases
    - Document all our findings in a `SECURITY.md` file (create it if it does not exist) in the root of this project. Make sure everything is included:
        1. What security vulnerability was addressed
        2. Why the original code was unsafe
        3. How the new code prevents the security issue
        4. What additional security measures should be considered (if any)
    - All implementation tasks in the document should be written in checkbox format so we progress could be tracked, and only make minimal necessary changes to address the security issue
    - All implementation tasks should be 1 story point stories
    - All Documentation Must NOT Focus on:
        1. cosmetic or performance-related changes
        2. modify code unrelated to security concerns

## Key Focus Areas:
- Exposed credentials and environment variables
- Insufficient input validation
- Authentication/authorization bypasses
- Insecure direct object references
- Missing rate limiting
- Inadequate error handling and logging
- Unsafe data exposure

## DO NOT:
- Skip the Analysis and Planning Phases